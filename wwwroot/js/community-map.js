// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
let map = null;
let markers = [];
let userLocationMarker = null;
let dotNetHelper = null;

window.setDotNetHelper = (helper) => {
    dotNetHelper = helper;
};

window.initializeCommunityMap = (apiKey, centerLat, centerLng, zoom) => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º Google Maps API –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    if (typeof google === 'undefined') {
        loadGoogleMapsApi(apiKey).then(() => {
            initializeMap(centerLat, centerLng, zoom, dotNetHelper);
        });
    } else {
        initializeMap(centerLat, centerLng, zoom, dotNetHelper);
    }
};

function loadGoogleMapsApi(apiKey) {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
    });
}

function initializeMap(centerLat, centerLng, zoom, dotNetHelper) {
    const mapOptions = {
        center: { lat: centerLat, lng: centerLng },
        zoom: zoom,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        mapTypeControl: true,
        streetViewControl: true,
        fullscreenControl: true
    };

    const mapElement = document.getElementById('map');
    if (!mapElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    map = new google.maps.Map(mapElement, mapOptions);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
    map.addListener('click', (event) => {
        if (window.dotNetHelper && window.dotNetHelper.invokeMethodAsync) {
            window.dotNetHelper.invokeMethodAsync('OnMapClick', event.latLng.lat(), event.latLng.lng());
        }
    });

    console.log('–ö–∞—Ä—Ç–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

window.loadParticipantsOnMap = (participantsJson) => {
    if (!map) {
        console.error('–ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }

    try {
        const participants = JSON.parse(participantsJson);

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        clearAllMarkers();

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participants.forEach((participant, index) => {
            addParticipantMarker(participant, index + 1);
        });

        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É:', error);
    }
};

function addParticipantMarker(participant, index) {
    if (!participant.Latitude || !participant.Longitude) {
        return;
    }

    const markerPosition = {
        lat: participant.Latitude,
        lng: participant.Longitude
    };

    const marker = new google.maps.Marker({
        position: markerPosition,
        map: map,
        title: participant.Name,
        animation: google.maps.Animation.DROP,
        icon: {
            url: `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(createCustomMarker(participant.Name))}`,
            scaledSize: new google.maps.Size(40, 40),
            anchor: new google.maps.Point(20, 40)
        }
    });

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    const infoWindow = new google.maps.InfoWindow({
        content: createInfoWindowContent(participant)
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä
    marker.addListener('click', () => {
        infoWindow.open(map, marker);

        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –≤ Blazor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        if (dotNetHelper && dotNetHelper.invokeMethodAsync) {
            dotNetHelper.invokeMethodAsync('OnParticipantMarkerClick', participant.Id || index);
        }
    });

    markers.push(marker);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    if (index === 1) {
        setTimeout(() => {
            infoWindow.open(map, marker);
        }, 1000);
    }
}

function createCustomMarker(name) {
    const initial = name.charAt(0).toUpperCase();
    return `
        <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
            <circle cx="20" cy="20" r="18" fill="#007bff" stroke="#ffffff" stroke-width="2"/>
            <text x="20" y="26" text-anchor="middle" fill="white" font-family="Arial" font-size="14" font-weight="bold">${initial}</text>
        </svg>
    `;
}

function createInfoWindowContent(participant) {
    let content = `
        <div style="max-width: 250px; font-family: Arial, sans-serif;">
            <h4 style="margin: 0 0 10px 0; color: #007bff;">${participant.Name}</h4>
            <p style="margin: 5px 0; color: #666;"><strong>üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${participant.Location}</p>
            <p style="margin: 5px 0; color: #666;"><strong>üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</strong> ${new Date(participant.Timestamp).toLocaleDateString()}</p>
    `;

    if (participant.Skills) {
        content += `<p style="margin: 5px 0; color: #666;"><strong>üõ† –ù–∞–≤—ã–∫–∏:</strong> ${participant.Skills}</p>`;
    }

    if (participant.LifeGoals) {
        content += `<p style="margin: 5px 0; color: #666;"><strong>üéØ –¶–µ–ª–∏:</strong> ${participant.LifeGoals}</p>`;
    }

    if (participant.Message) {
        content += `<p style="margin: 5px 0; color: #666;"><strong>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${participant.Message}</p>`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    const socialLinks = [];
    if (participant.SocialContacts?.Discord) {
        socialLinks.push(`Discord: ${participant.SocialContacts.Discord}`);
    }
    if (participant.SocialContacts?.Telegram) {
        socialLinks.push(`Telegram: ${participant.SocialContacts.Telegram}`);
    }
    if (participant.SocialContacts?.Vk) {
        socialLinks.push(`VK: ${participant.SocialContacts.Vk}`);
    }

    if (socialLinks.length > 0) {
        content += `<p style="margin: 5px 0; color: #666;"><strong>üåê –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</strong></p>`;
        content += `<p style="margin: 5px 0; padding-left: 10px; color: #666;">${socialLinks.join(', ')}</p>`;
    }

    content += `</div>`;

    return content;
}

function clearAllMarkers() {
    markers.forEach(marker => {
        marker.setMap(null);
    });
    markers = [];
}

window.centerMapOnUserLocation = () => {
    if (!map) {
        console.error('–ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const userLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                map.setCenter(userLocation);
                map.setZoom(12);

                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                if (userLocationMarker) {
                    userLocationMarker.setMap(null);
                }

                userLocationMarker = new google.maps.Marker({
                    position: userLocation,
                    map: map,
                    title: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                    icon: {
                        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                            <svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="15" cy="15" r="12" fill="#28a745" stroke="#ffffff" stroke-width="2"/>
                                <circle cx="15" cy="15" r="6" fill="#ffffff"/>
                            </svg>
                        `),
                        scaledSize: new google.maps.Size(30, 30),
                        anchor: new google.maps.Point(15, 15)
                    }
                });

                console.log('–ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏');
            },
            (error) => {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.');
            }
        );
    } else {
        console.error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
};

window.focusOnParticipant = (latitude, longitude, name) => {
    if (!map) {
        console.error('–ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }

    const position = { lat: latitude, lng: longitude };

    map.setCenter(position);
    map.setZoom(15);

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è —Ñ–æ–∫—É—Å–∞
    new google.maps.Marker({
        position: position,
        map: map,
        title: name,
        animation: google.maps.Animation.BOUNCE
    });

    console.log(`–§–æ–∫—É—Å –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–µ: ${name}`);
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.CommunityMapUtils = {
    initializeCommunityMap,
    loadParticipantsOnMap,
    centerMapOnUserLocation,
    focusOnParticipant,
    clearAllMarkers
};