// wwwroot/js/community-globe.js
//import * as THREE from './libs/three.module.js';
//import { OrbitControls } from './libs/OrbitControls.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
let THREE, OrbitControls;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
async function loadScript(src) {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.type = 'module';
        script.onload = resolve;
        script.onerror = () => reject(new Error(`Failed to load script: ${src}`));
        script.src = src;
        document.head.appendChild(script);
    });
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
async function initializeDependencies() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º Three.js
        const threeModule = await import('./libs/three.module.js');
        THREE = threeModule.default || threeModule;
        console.log('‚úÖ Three.js –∑–∞–≥—Ä—É–∂–µ–Ω:', THREE.REVISION);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º OrbitControls
        const controlsModule = await import('./libs/OrbitControls.js');
        OrbitControls = controlsModule.OrbitControls;
        console.log('‚úÖ OrbitControls –∑–∞–≥—Ä—É–∂–µ–Ω');

        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error);
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
let dependenciesLoaded = false;

initializeDependencies().then(success => {
    dependenciesLoaded = success;
    if (success) {
        console.log('üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
        console.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≥–ª–æ–±—É—Å–∞
const globeInstances = new Map();

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º 3D –≥–ª–æ–±—É—Å–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Å–≤–µ—â–µ–Ω–∏—è,
 * —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
class CommunityGlobe {
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä 3D –≥–ª–æ–±—É—Å–∞
     * @param {string} containerId - ID HTML —ç–ª–µ–º–µ–Ω—Ç–∞-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     * @param {Object} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–æ–±—É—Å–∞
     */
    constructor(containerId, options = {}) {
        this.containerId = containerId;
        this.container = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ

        this.options = {
            ...options,
            width: 800,
            height: 600,
            backgroundColor: '#000011',
            atmosphereColor: '#00aaff',
            atmosphereOpacity: 0.2,
            participantPointSize: 0.5,
            participantPointColor: '#ffff00',
            highlightedPointColor: '#ff6600',
            autoRotate: true,
            autoRotateSpeed: 0.1,
            enableMouseControls: true,
            enableZoom: true,
            minZoom: 0.5,
            maxZoom: 4.0,
            levelOfDetail: 2,
            earthTextureUrl: "/_content/ZealousMindedPeopleGeo/assets/earth/8k_earth_daymap.jpg",
            normalTextureUrl: "/_content/ZealousMindedPeopleGeo/assets/earth/8k_earth_normal_map.tif",
            specularTextureUrl: "/_content/ZealousMindedPeopleGeo/assets/earth/8k_earth_specular_map.tif",
            cloudsTextureUrl: "/_content/ZealousMindedPeopleGeo/assets/earth/8k_earth_clouds.jpg",
            enableClouds: true,
            cloudsOpacity: 0.1,
            cloudsSpeed: 0.01,
            enableAtmosphereGlow: true,
            countryPointColor: '#ffffff',
            countryPointSize: 0.1,
            countryLineColor: '#444444',
            countryLineWidth: 0.5,
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è
            sunLightIntensity: 3.0,
            sunLightColor: '#ffffff',
            ambientLightIntensity: 3,
            ambientLightColor: '#404040',
            atmosphereLightIntensity: 1,
            atmosphereLightColor: '#00aaff',
        };

        this.state = {
            isInitialized: false,
            isAutoRotating: this.options.autoRotate,
            currentLod: this.options.levelOfDetail,
            participantCount: 0,
            countryCount: 0,
            cameraPosition: { x: 0, y: 0, z: 2.5 },
            cameraTarget: { x: 0, y: 0, z: 0 }
        };

        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.controls = null;
        this.earthGroup = null;
        this.atmosphere = null;
        this.clouds = null;
        this.participantPoints = [];
        this.countryPolygons = [];
        this.raycaster = null;
        this.mouse = { x: 0, y: 0 };
        this.animationId = null;
        this.clock = null;
        this.pointMetadata = new Map();
        this.callbacks = { // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è callbacks
            onGlobeReady: null,
            onError: null,
            onParticipantClick: null
        };

        this.init();
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±—É—Å–∞
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ü–µ–Ω—É, –∫–∞–º–µ—Ä—É, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã
     * @returns {Promise<void>}
     */
    async init() {
        try {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            let attempts = 0;
            while (!dependenciesLoaded && attempts < 50) {
                await new Promise(resolve => setTimeout(resolve, 100));
                attempts++;
            }

            if (!dependenciesLoaded) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Three.js');
            }

            if (!this.isWebGLSupported()) {
                throw new Error('WebGL is not supported in this browser');
            }

            this.setupScene();
            this.createEarth();
            this.createAtmosphere();
            this.createClouds();
            this.setupLighting();
            this.setupControls();
            this.setupEventListeners();

            this.state.isInitialized = true;

            if (this.callbacks.onGlobeReady) {
                this.callbacks.onGlobeReady(this.state);
            }

            this.animate();
        } catch (error) {
            console.error('Failed to initialize globe:', error);
            if (this.callbacks.onError) {
                this.callbacks.onError(error.message);
            }
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É WebGL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
     * @returns {boolean} true –µ—Å–ª–∏ WebGL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
     */
    isWebGLSupported() {
        try {
            const canvas = document.createElement('canvas');
            return !!(window.WebGLRenderingContext &&
                (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
        } catch (e) {
            return false;
        }
    }

    getContainer(maxAttempts = 50, delayMs = 100) {
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            const container = document.getElementById(this.containerId);
            if (container) {
                console.log(`Container found on attempt ${attempt}`);
                return container;
            }

            if (attempt < maxAttempts) {
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
                const startTime = Date.now();
                while (Date.now() - startTime < delayMs) {
                    // Busy wait –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                }
            }
        }

        console.error(`Container with id '${this.containerId}' not found after ${maxAttempts} attempts`);
        return null;
    }

    setupScene() {
        if (typeof THREE === 'undefined') {
            throw new Error('Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. setupScene –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω.');
        }

        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(this.options.backgroundColor);

        const aspect = this.options.width / this.options.height;
        this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);
        this.camera.position.set(
            this.state.cameraPosition.x,
            this.state.cameraPosition.y,
            this.state.cameraPosition.z
        );

        this.renderer = new THREE.WebGLRenderer({ antialias: true });
        this.renderer.setSize(this.options.width, this.options.height);
        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        this.container = this.getContainer();
        if (!this.container) {
            throw new Error(`Container with id '${this.containerId}' not found after multiple attempts`);
        }

        this.container.innerHTML = '';
        this.container.appendChild(this.renderer.domElement);

        this.earthGroup = new THREE.Group();
        this.scene.add(this.earthGroup);

        this.raycaster = new THREE.Raycaster();
        this.raycaster.params.Points.threshold = 0.1;

        this.clock = new THREE.Clock();
    }

    createEarth() {
        const earthGeometry = new THREE.SphereGeometry(1, 64, 64);
        const textureLoader = new THREE.TextureLoader();

        console.log('üåç –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –≥–ª–æ–±—É—Å–∞:');
        console.log('–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞:', this.options.earthTextureUrl);
        console.log('–ö–∞—Ä—Ç–∞ –Ω–æ—Ä–º–∞–ª–µ–π:', this.options.normalTextureUrl);
        console.log('–ö–∞—Ä—Ç–∞ —Å–ø–µ–∫—É–ª—è—Ü–∏–∏:', this.options.specularTextureUrl);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        const loadTexture = (url) => {
            if (!url) return null;
            try {
                console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã:', url);
                return textureLoader.load(url);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã:', url, error);
                return null;
            }
        };

        const earthMaterial = new THREE.MeshPhongMaterial({
            map: loadTexture(this.options.earthTextureUrl),
            normalMap: loadTexture(this.options.normalTextureUrl),
            specularMap: loadTexture(this.options.specularTextureUrl),
            shininess: 0.1
        });

        const earth = new THREE.Mesh(earthGeometry, earthMaterial);
        this.earthGroup.add(earth);
        this.earthRotation = 0;
    }

    createAtmosphere() {
        if (!this.options.enableAtmosphereGlow) return;

        const atmosphereGeometry = new THREE.SphereGeometry(1.05, 64, 64);
        const atmosphereMaterial = new THREE.MeshPhongMaterial({
            color: this.options.atmosphereColor,
            transparent: true,
            opacity: this.options.atmosphereOpacity,
            side: THREE.BackSide
        });

        this.atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
        this.earthGroup.add(this.atmosphere);
    }

    createClouds() {
        if (!this.options.enableClouds || !this.options.cloudsTextureUrl) return;

        const cloudsGeometry = new THREE.SphereGeometry(1.01, 64, 64);
        const textureLoader = new THREE.TextureLoader();

        console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã –æ–±–ª–∞–∫–æ–≤:', this.options.cloudsTextureUrl);

        const loadCloudTexture = (url) => {
            if (!url) return null;
            try {
                console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–∞–∫–æ–≤:', url);
                return textureLoader.load(url);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞–∫–æ–≤:', url, error);
                return null;
            }
        };

        const cloudsMaterial = new THREE.MeshPhongMaterial({
            map: loadCloudTexture(this.options.cloudsTextureUrl),
            transparent: true,
            opacity: this.options.cloudsOpacity
        });

        this.clouds = new THREE.Mesh(cloudsGeometry, cloudsMaterial);
        this.earthGroup.add(this.clouds);
        this.cloudRotation = 0;
    }

    setupLighting() {
        console.log('üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è –≥–ª–æ–±—É—Å–∞:');
        console.log('–Ø—Ä–∫–æ—Å—Ç—å —Å–æ–ª–Ω—Ü–∞:', this.options.sunLightIntensity);
        console.log('–¶–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞:', this.options.sunLightColor);
        console.log('–Ø—Ä–∫–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è:', this.options.ambientLightIntensity);
        console.log('–¶–≤–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è:', this.options.ambientLightColor);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–≤–µ—Ç –∏–∑ hex –≤ Color
        const sunColor = new THREE.Color(this.options.sunLightColor);
        const ambientColor = new THREE.Color(this.options.ambientLightColor);
        const atmosphereColor = new THREE.Color(this.options.atmosphereLightColor);

        const sunLight = new THREE.DirectionalLight(sunColor, this.options.sunLightIntensity);
        sunLight.position.set(5, 3, 5);
        sunLight.castShadow = true;
        this.scene.add(sunLight);

        const ambientLight = new THREE.AmbientLight(ambientColor, this.options.ambientLightIntensity);
        this.scene.add(ambientLight);

        const atmosphereLight = new THREE.PointLight(atmosphereColor, this.options.atmosphereLightIntensity, 100);
        atmosphereLight.position.set(0, 0, 3);
        this.scene.add(atmosphereLight);
    }

    setupControls() {
        if (!this.options.enableMouseControls) return;

        if (typeof OrbitControls === 'undefined') {
            console.error('OrbitControls –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return;
        }

        this.controls = new OrbitControls(this.camera, this.renderer.domElement);
        this.controls.enableDamping = true;
        this.controls.dampingFactor = 0.05;
        this.controls.enableZoom = this.options.enableZoom;
        this.controls.minDistance = this.options.minZoom;
        this.controls.maxDistance = this.options.maxZoom;
        this.controls.autoRotate = this.options.autoRotate;
        this.controls.autoRotateSpeed = this.options.autoRotateSpeed;
    }

    setupEventListeners() {
        this.renderer.domElement.addEventListener('click', (event) => this.onMouseClick(event));
        this.renderer.domElement.addEventListener('mousemove', (event) => this.onMouseMove(event));
        window.addEventListener('resize', () => this.onWindowResize());
    }

    onMouseClick(event) {
        const rect = this.renderer.domElement.getBoundingClientRect();
        this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

        this.raycaster.setFromCamera(this.mouse, this.camera);

        if (this.participantPoints.length > 0) {
            const intersects = this.raycaster.intersectObjects(this.participantPoints);
            if (intersects.length > 0) {
                const pointIndex = intersects[0].index;
                const metadata = this.pointMetadata.get(`participant_${pointIndex}`);
                if (metadata && this.callbacks.onParticipantClick) {
                    this.callbacks.onParticipantClick(metadata);
                }
            }
        }
    }

    onMouseMove(event) {
        const rect = this.renderer.domElement.getBoundingClientRect();
        this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
    }

    onWindowResize() {
        if (!this.container) {
            this.container = this.getContainer();
        }

        if (this.container) {
            const rect = this.container.getBoundingClientRect();
            this.options.width = rect.width || this.options.width;
            this.options.height = rect.height || this.options.height;

            this.camera.aspect = this.options.width / this.options.height;
            this.camera.updateProjectionMatrix();
            this.renderer.setSize(this.options.width, this.options.height);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –≥–ª–æ–±—É—Å
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
     */
    addParticipants(participants) {
        if (!this.state.isInitialized) return;

        this.clearParticipants();
        if (!participants || participants.length === 0) return;

        const geometry = new THREE.BufferGeometry();
        const positions = [];
        const colors = [];
        const sizes = [];

        participants.forEach((participant, index) => {
            const position = this.latLngToVector3(participant.latitude, participant.longitude, 1.001);
            positions.push(position.x, position.y, position.z);
            const color = new THREE.Color(this.options.participantPointColor);
            colors.push(color.r, color.g, color.b);
            sizes.push(this.options.participantPointSize);
            this.pointMetadata.set(`participant_${index}`, participant);
        });

        geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
        geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
        geometry.setAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));

        const material = new THREE.ShaderMaterial({
            uniforms: { pointTexture: { value: this.createCircleTexture() } },
            vertexShader: `
                attribute float size;
                attribute vec3 color;
                varying vec3 vColor;
                void main() {
                    vColor = color;
                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
                    gl_PointSize = size * (300.0 / -mvPosition.z);
                    gl_Position = projectionMatrix * mvPosition;
                }
            `,
            fragmentShader: `
                uniform sampler2D pointTexture;
                varying vec3 vColor;
                void main() {
                    gl_FragColor = vec4(vColor, 1.0);
                    gl_FragColor = gl_FragColor * texture2D(pointTexture, gl_PointCoord);
                }
            `,
            transparent: true
        });

        const points = new THREE.Points(geometry, material);
        this.scene.add(points);
        this.participantPoints.push(points);
        this.state.participantCount = participants.length;

        console.log(`Added ${participants.length} participants to globe`);
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≥–ª–æ–±—É—Å–∞
     * –£–¥–∞–ª—è–µ—Ç —Ç–æ—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—á–∏—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
     */
    clearParticipants() {
        this.participantPoints.forEach(points => {
            this.scene.remove(points);
            points.geometry.dispose();
            if (points.material instanceof THREE.Material) points.material.dispose();
        });
        this.participantPoints = [];
        this.pointMetadata.clear();
        this.state.participantCount = 0;
    }

    latLngToVector3(lat, lng, radius = 1) {
        const phi = (90 - lat) * (Math.PI / 180);
        const theta = (lng + 180) * (Math.PI / 180);
        return {
            x: -(radius * Math.sin(phi) * Math.cos(theta)),
            z: (radius * Math.sin(phi) * Math.sin(theta)),
            y: (radius * Math.cos(phi))
        };
    }

    createCircleTexture() {
        const canvas = document.createElement('canvas');
        canvas.width = 64;
        canvas.height = 64;
        const ctx = canvas.getContext('2d');
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const radius = canvas.width / 2;

        const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, radius);
        gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
        gradient.addColorStop(0.2, 'rgba(255, 255, 255, 1)');
        gradient.addColorStop(0.4, 'rgba(255, 255, 255, 0.8)');
        gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');

        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.fill();

        return new THREE.CanvasTexture(canvas);
    }

    animate() {
        if (!this.state.isInitialized) return;

        this.animationId = requestAnimationFrame(() => this.animate());
        const deltaTime = this.clock.getDelta();

        if (this.earthGroup) {
            this.earthRotation += deltaTime * 0.1;
            this.earthGroup.rotation.y = this.earthRotation;
        }

        if (this.clouds) {
            this.cloudRotation += deltaTime * this.options.cloudsSpeed;
            this.clouds.rotation.y = this.cloudRotation;
        }

        if (this.controls) this.controls.update();
        this.updateCameraState();
        this.renderer.render(this.scene, this.camera);
    }

    updateCameraState() {
        if (this.camera) {
            this.state.cameraPosition = {
                x: this.camera.position.x,
                y: this.camera.position.y,
                z: this.camera.position.z
            };
        }
    }

    centerOn(latitude, longitude, zoom = 2.0) {
        if (!this.state.isInitialized) return;
        const position = this.latLngToVector3(latitude, longitude, zoom);
        this.animateCameraTo(position, 1000);
    }

    animateCameraTo(targetPosition, duration = 1000) {
        if (!this.camera) return;
        const startPosition = { ...this.camera.position };
        const startTime = Date.now();

        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const easeInOutCubic = t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
            const easedProgress = easeInOutCubic(progress);

            this.camera.position.x = startPosition.x + (targetPosition.x - startPosition.x) * easedProgress;
            this.camera.position.y = startPosition.y + (targetPosition.y - startPosition.y) * easedProgress;
            this.camera.position.z = startPosition.z + (targetPosition.z - startPosition.z) * easedProgress;
            this.camera.lookAt(0, 0, 0);

            if (progress < 1) requestAnimationFrame(animate);
        };

        animate();
    }

    setAutoRotation(enabled, speed) {
        this.state.isAutoRotating = enabled;
        if (this.controls) {
            this.controls.autoRotate = enabled;
            this.controls.autoRotateSpeed = speed;
        }
    }

    setLevelOfDetail(lod) {
        this.state.currentLod = lod;
    }

    setSunLightIntensity(intensity) {
        if (this.scene) {
            const sunLight = this.scene.children.find(child => child instanceof THREE.DirectionalLight);
            if (sunLight) {
                sunLight.intensity = intensity;
                console.log('–Ø—Ä–∫–æ—Å—Ç—å —Å–æ–ª–Ω—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', intensity);
            }
        }
    }

    setSunLightColor(colorHex) {
        if (this.scene) {
            const sunLight = this.scene.children.find(child => child instanceof THREE.DirectionalLight);
            if (sunLight) {
                sunLight.color = new THREE.Color(colorHex);
                console.log('–¶–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', colorHex);
            }
        }
    }

    setAmbientLightIntensity(intensity) {
        if (this.scene) {
            const ambientLight = this.scene.children.find(child => child instanceof THREE.AmbientLight);
            if (ambientLight) {
                ambientLight.intensity = intensity;
                console.log('–Ø—Ä–∫–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', intensity);
            }
        }
    }

    setAtmosphereLightIntensity(intensity) {
        if (this.scene) {
            const atmosphereLight = this.scene.children.find(child => child instanceof THREE.PointLight);
            if (atmosphereLight) {
                atmosphereLight.intensity = intensity;
                console.log('–Ø—Ä–∫–æ—Å—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', intensity);
            }
        }
    }

    getState() {
        return { ...this.state };
    }

    clear() {
        this.clearParticipants();
        this.state.participantCount = 0;
        this.state.countryCount = 0;
    }

    dispose() {
        if (this.animationId) cancelAnimationFrame(this.animationId);
        if (this.controls) this.controls.dispose();

        this.scene.traverse(object => {
            if (object.geometry) object.geometry.dispose();
            if (object.material) {
                if (Array.isArray(object.material)) {
                    object.material.forEach(material => material.dispose());
                } else {
                    object.material.dispose();
                }
            }
        });

        this.renderer.dispose();
        this.pointMetadata.clear();
        this.state.isInitialized = false;
    }

    updateParticipantPosition(participantId, latitude, longitude) {
        const index = Array.from(this.pointMetadata.keys()).findIndex(key => this.pointMetadata.get(key).id === participantId);
        if (index === -1) return;

        const participant = this.pointMetadata.get(`participant_${index}`);
        participant.latitude = latitude;
        participant.longitude = longitude;

        const position = this.latLngToVector3(latitude, longitude, 1.001);
        const geometry = this.participantPoints[0].geometry;
        const positions = geometry.attributes.position.array;
        positions[index * 3] = position.x;
        positions[index * 3 + 1] = position.y;
        positions[index * 3 + 2] = position.z;
        geometry.attributes.position.needsUpdate = true;
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
     * @param {number} participantId - ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     * @deprecated –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å removeParticipantById
     */
    removeParticipant(participantId) {
        const index = Array.from(this.pointMetadata.keys()).findIndex(key => this.pointMetadata.get(key).id === participantId);
        if (index === -1) return;

        this.pointMetadata.delete(`participant_${index}`);
        const participants = Array.from(this.pointMetadata.values());
        this.addParticipants(participants);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
     * @param {number} participantId - ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     * @returns {boolean} true –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω
     */
    removeParticipantById(participantId) {
        // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
        const participants = Array.from(this.pointMetadata.values());
        const filteredParticipants = participants.filter(p => p.id !== participantId);

        if (filteredParticipants.length < participants.length) {
            this.clearParticipants();
            if (filteredParticipants.length > 0) {
                this.addParticipants(filteredParticipants);
            }
            console.log(`–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID ${participantId} —É–¥–∞–ª–µ–Ω`);
            return true;
        }

        console.log(`–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID ${participantId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return false;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –≥–ª–æ–±—É—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
     * @param {Object} participant - –û–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –ø–æ–ª—è–º–∏ id, name, latitude, longitude
     * @returns {boolean} true –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
     */
    addTestParticipant(participant) {
        if (!this.state.isInitialized) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID
        const existingIndex = Array.from(this.pointMetadata.values()).findIndex(p => p.id === participant.id);
        if (existingIndex !== -1) {
            console.log(`–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID ${participant.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return false;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const participants = Array.from(this.pointMetadata.values());
        participants.push(participant);

        this.addParticipants(participants);
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: ${participant.name} (${participant.latitude}, ${participant.longitude})`);
        return true;
    }
}

export async function initializeScripts() {
    console.log('Initializing Community Globe scripts...');
    return true;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä 3D –≥–ª–æ–±—É—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
 * @param {string} containerId - ID HTML —ç–ª–µ–º–µ–Ω—Ç–∞-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 * @param {Object} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–æ–±—É—Å–∞
 * @returns {boolean} true –µ—Å–ª–∏ –≥–ª–æ–±—É—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
 */
export function createGlobe(containerId, options) {
    try {
        console.log('Creating globe for container:', containerId);
        const globe = new CommunityGlobe(containerId, options);
        globeInstances.set(containerId, globe);
        console.log('Globe created successfully');
        return true;
    } catch (error) {
        console.error('Error creating globe:', error);
        return false;
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –≥–ª–æ–±—É—Å
 * @param {Array} participants - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @returns {boolean} true –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã
 */
export function addParticipants(participants) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.addParticipants(participants);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error adding participants:', error);
        return false;
    }
}

export function updateParticipantPosition(participantId, latitude, longitude) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.updateParticipantPosition(participantId, latitude, longitude);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error updating participant position:', error);
        return false;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID —Å –≥–ª–æ–±—É—Å–∞
 * @param {number} participantId - ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns {boolean} true –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
 */
export function removeParticipant(participantId) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            return globe.removeParticipantById(participantId);
        }
        return false;
    } catch (error) {
        console.error('Error removing participant:', error);
        return false;
    }
}

/**
 * –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–º–µ—Ä—É –≥–ª–æ–±—É—Å–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
 * @param {number} latitude - –®–∏—Ä–æ—Ç–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} longitude - –î–æ–ª–≥–æ—Ç–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} zoom - –£—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0)
 * @returns {boolean} true –µ—Å–ª–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
 */
export function centerOn(latitude, longitude, zoom) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.centerOn(latitude, longitude, zoom);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error centering globe:', error);
        return false;
    }
}

export function setLevelOfDetail(lod) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.setLevelOfDetail(lod);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error setting LOD:', error);
        return false;
    }
}

export function setAutoRotation(enabled, speed) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.setAutoRotation(enabled, speed);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error setting auto rotation:', error);
        return false;
    }
}

export function setSunLightIntensity(intensity) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.setSunLightIntensity(intensity);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error setting sun light intensity:', error);
        return false;
    }
}

export function setSunLightColor(colorHex) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.setSunLightColor(colorHex);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error setting sun light color:', error);
        return false;
    }
}

export function setAmbientLightIntensity(intensity) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.setAmbientLightIntensity(intensity);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error setting ambient light intensity:', error);
        return false;
    }
}

export async function loadCountriesData() {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            const response = await fetch('/_content/ZealousMindedPeopleGeo/data/countries.geojson');
            const data = await response.json();
            globe.loadCountries(data);
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error loading countries data:', error);
        return false;
    }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≥–ª–æ–±—É—Å–∞
 * @returns {boolean} true –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
 */
export function clear() {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            globe.clear();
            return true;
        }
        return false;
    } catch (error) {
        console.error('Error clearing globe:', error);
        return false;
    }
}

export function getState() {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            return globe.getState();
        }
        return null;
    } catch (error) {
        console.error('Error getting globe state:', error);
        return null;
    }
}

export function dispose() {
    try {
        for (const [containerId, globe] of globeInstances) {
            globe.dispose();
        }
        globeInstances.clear();
        return true;
    } catch (error) {
        console.error('Error disposing globe:', error);
        return false;
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –≥–ª–æ–±—É—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
 * @param {Object} participant - –û–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –ø–æ–ª—è–º–∏ id, name, latitude, longitude
 * @returns {boolean} true –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
 */
export function addTestParticipant(participant) {
    try {
        const globe = globeInstances.values().next().value;
        if (globe) {
            return globe.addTestParticipant(participant);
        }
        return false;
    } catch (error) {
        console.error('Error adding test participant:', error);
        return false;
    }
}

export function getThreeJsVersion() {
    try {
        if (typeof THREE !== 'undefined' && THREE.REVISION) {
            return THREE.REVISION;
        }
        return 'unknown';
    } catch (error) {
        console.error('Error getting Three.js version:', error);
        return 'error';
    }
}