using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;
using ZealousMindedPeopleGeo.Services.Mapping;
using ZealousMindedPeopleGeo.Services.Repositories;
using ZealousMindedPeopleGeo.Models;

namespace ZealousMindedPeopleGeo.Components;

public partial class CommunityGlobeComponent
{
    /// <summary>
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≥–ª–æ–±—É—Å–∞
    /// </summary>
    [Parameter] public string ContainerId { get; set; } = $"globe-{Guid.NewGuid():N}";

    /// <summary>
    /// –®–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≥–ª–æ–±—É—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    /// </summary>
    [Parameter] public int Width { get; set; } = 800;

    /// <summary>
    /// –í—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≥–ª–æ–±—É—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    /// </summary>
    [Parameter] public int Height { get; set; } = 600;

    /// <summary>
    /// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    /// </summary>
    [Parameter] public bool ShowControls { get; set; } = true;

    /// <summary>
    /// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –ø—Ä–∏ –∫–ª–∏–∫–µ
    /// </summary>
    [Parameter] public bool ShowParticipantInfo { get; set; } = true;

    /// <summary>
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–ª–æ–±—É—Å–∞
    /// </summary>
    [Parameter] public GlobeOptions? Options { get; set; }

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫—É
    /// </summary>
    [Parameter] public EventCallback<Participant> OnParticipantClick { get; set; }

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±—É—Å–∞
    /// </summary>
    [Parameter] public EventCallback<GlobeInitializationResult> OnGlobeInitialized { get; set; }

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–æ–±—É—Å–∞
    /// </summary>
    [Parameter] public EventCallback<GlobeState> OnStateChanged { get; set; }

    /// <summary>
    /// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    /// </summary>
    [Parameter] public bool ShowParticipantManagement { get; set; } = true;

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    /// </summary>
    [Parameter] public EventCallback<Participant> OnParticipantAdded { get; set; }

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    /// </summary>
    [Parameter] public EventCallback<int> OnParticipantRemoved { get; set; }

    [Inject] private IGlobeMediator GlobeMediator { get; set; } = default!;
    [Inject] private IParticipantRepository ParticipantRepository { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private bool _isInitializing = false;
    private bool _isInitialized = false;
    private string? _errorMessage;
    private Participant? _selectedParticipant;
    private int _participantCount;
    private int _countryCount;
    private int _currentLod = 2;
    private bool _isAutoRotating = true;
    private GlobeState? _currentState;
    private System.Timers.Timer? _updateTimer;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    private Participant _newParticipant = new();
    private int _participantIdToRemove;
    private bool _isAddingParticipant = false;
    private bool _isRemovingParticipant = false;
    private string? _operationMessage;
    private string? _operationError;
    private bool _isParticipantPanelCollapsed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≥–ª–æ–±—É—Å–∞
            await InitializeGlobeScriptsAsync();

            await InitializeGlobeAsync();
            await LoadParticipantsAsync();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            _updateTimer = new System.Timers.Timer(30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            _updateTimer.Elapsed += async (s, e) =>
            {
                try
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º InvokeAsync –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ Blazor Server
                    await InvokeAsync(async () =>
                    {
                        await LoadParticipantsAsync();
                    });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {ex.Message}");
                }
            };
            _updateTimer.Start();
        }
    }

    private async Task InitializeGlobeAsync()
    {
        _isInitializing = true;
        _errorMessage = null;
        StateHasChanged();

        const int maxRetries = 3;
        const int retryDelay = 200; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

        for (int attempt = 1; attempt <= maxRetries; attempt++)
        {
            try
            {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if (attempt > 1)
                {
                    await Task.Delay(retryDelay * attempt);
                }

                var globeOptions = Options ?? new GlobeOptions
                {
                    Width = Width,
                    Height = Height,
                    AutoRotate = true,
                    EnableMouseControls = true,
                    LevelOfDetail = _currentLod
                };

                var result = await GlobeMediator.InitializeGlobeAsync(ContainerId, globeOptions);

                if (result.Success)
                {
                    _isInitialized = true;
                    await OnGlobeInitialized.InvokeAsync(result);
                    await UpdateGlobeStateAsync();
                    return; // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                }
                else
                {
                    _errorMessage = result.ErrorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏";
                    if (attempt == maxRetries)
                    {
                        break; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞
                    }
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{maxRetries}): {ex.Message}";
                if (attempt == maxRetries)
                {
                    break; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞
                }
            }
        }

        _isInitializing = false;
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadParticipantsAsync()
    {
        if (!_isInitialized) return;

        try
        {
            var participants = await ParticipantRepository.GetAllParticipantsAsync();

            var result = await GlobeMediator.AddParticipantsAsync(participants);

            if (result.Success)
            {
                _participantCount = participants.Count();
                await UpdateGlobeStateAsync();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task InitializeGlobeScriptsAsync()
    {
        try
        {
            Console.WriteLine("üîç –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≥–ª–æ–±—É—Å–∞");

            // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç—ã
            try
            {
                var initState = await JSRuntime.InvokeAsync<object>("eval", "window.globeInitializationState");
                var stateDict = initState as System.Collections.Generic.Dictionary<string, object>;

                if (stateDict != null &&
                    stateDict.TryGetValue("functionsAvailable", out var functionsAvailable) &&
                    (bool)functionsAvailable)
                {
                    Console.WriteLine("‚úÖ –°–∫—Ä–∏–ø—Ç—ã –≥–ª–æ–±—É—Å–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
                    return;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ÑπÔ∏è –°–∫—Ä–∏–ø—Ç—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {ex.Message}");
            }

            // –®–∞–≥ 2: –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            Console.WriteLine("üì• –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≥–ª–æ–±—É—Å–∞...");

            try
            {

                await JSRuntime.InvokeVoidAsync("import", "_content/ZealousMindedPeopleGeo/js/community-globe.js");

                Console.WriteLine("‚úÖ Community Globe –∑–∞–≥—Ä—É–∂–µ–Ω");

                // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                await Task.Delay(1000);

            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤: {ex.Message}");
                throw;
            }

            // –®–∞–≥ 3: –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
            var maxWaitTime = 10000;
            var waitStep = 200;

            for (int i = 0; i < maxWaitTime / waitStep; i++)
            {
                await Task.Delay(waitStep);

                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    var initState = await JSRuntime.InvokeAsync<object>("eval", "window.globeInitializationState");
                    var stateDict = initState as System.Collections.Generic.Dictionary<string, object>;

                    if (stateDict != null)
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                        if (stateDict.TryGetValue("scriptsLoaded", out var scriptsLoaded) && (bool)scriptsLoaded)
                        {
                            Console.WriteLine($"‚úÖ –°–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i + 1}");

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                            if (stateDict.TryGetValue("functionsAvailable", out var functionsAvailable) && (bool)functionsAvailable)
                            {
                                Console.WriteLine($"üéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i + 1}");
                                return; // –í—Å—ë –≥–æ—Ç–æ–≤–æ
                            }
                            else
                            {
                                Console.WriteLine($"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i + 1}: —Ñ—É–Ω–∫—Ü–∏–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã");
                            }
                        }
                        else
                        {
                            Console.WriteLine($"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i + 1}: —Å–∫—Ä–∏–ø—Ç—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i + 1}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è - {ex.Message}");
                }
            }

            Console.WriteLine("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ —Ç–∞–π–º–∞—É—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å
        }
        catch (Exception ex)
        {
            _errorMessage = $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤: {ex.Message}";
            Console.WriteLine($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤: {ex.Message}");
            StateHasChanged();
        }
    }

    private async Task RetryInitializationAsync()
    {
        if (_isInitializing || _isInitialized) return;

        await InitializeGlobeAsync();
    }

    private async Task ToggleRotationAsync()
    {
        if (!_isInitialized) return;

        var newRotationState = !_isAutoRotating;
        var speed = newRotationState ? 0.5 : 0.0;
        var result = await GlobeMediator.SetAutoRotationAsync(newRotationState, speed);

        if (result.Success)
        {
            _isAutoRotating = newRotationState;
            await UpdateGlobeStateAsync();
        }
    }

    private async Task OnLodChanged(ChangeEventArgs e)
    {
        if (!_isInitialized || !int.TryParse(e.Value?.ToString(), out var lod)) return;

        _currentLod = lod;
        var result = await GlobeMediator.SetLevelOfDetailAsync(lod);

        if (result.Success)
        {
            await UpdateGlobeStateAsync();
        }
    }

    private async Task RefreshDataAsync()
    {
        await LoadParticipantsAsync();
    }

    private async Task CenterOnUserAsync()
    {
        if (!_isInitialized) return;

        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        var result = await GlobeMediator.CenterOnAsync(55.7558, 37.6176);

        if (result.Success)
        {
            await UpdateGlobeStateAsync();
        }
    }

    private void CloseParticipantInfo()
    {
        _selectedParticipant = null;
        StateHasChanged();
    }

    private void ToggleParticipantPanel()
    {
        _isParticipantPanelCollapsed = !_isParticipantPanelCollapsed;
        StateHasChanged();
    }

    private void ClearParticipantForm()
    {
        _newParticipant = new Participant();
        StateHasChanged();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å JavaScript —Ñ—É–Ω–∫—Ü–∏–π –≥–ª–æ–±—É—Å–∞
    /// </summary>
    private async Task<bool> IsJavaScriptAvailableAsync(string functionName = "safeAddTestParticipant")
    {
        try
        {
            return await JSRuntime.InvokeAsync<bool>("eval", $"typeof window.{functionName} === 'function'");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è JavaScript –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ex.Message}");
            return false;
        }
    }

    private async Task CenterOnFormCoordinates()
    {
        if (!_isInitialized || !_newParticipant.Latitude.HasValue || !_newParticipant.Longitude.HasValue) return;

        var result = await GlobeMediator.CenterOnAsync(_newParticipant.Latitude.Value, _newParticipant.Longitude.Value);

        if (result.Success)
        {
            ShowOperationMessage("‚úÖ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ñ–æ—Ä–º—ã", false);
        }
        else
        {
            ShowOperationMessage($"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {result.ErrorMessage}", true);
        }
    }

    private async Task AddParticipantAsync()
    {
        if (!_isInitialized || _isAddingParticipant) return;

        _isAddingParticipant = true;
        _operationMessage = null;
        _operationError = null;
        StateHasChanged();

        try
        {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (string.IsNullOrWhiteSpace(_newParticipant.Name))
            {
                ShowOperationMessage("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞", true);
                return;
            }

            if (!_newParticipant.Latitude.HasValue || !_newParticipant.Longitude.HasValue)
            {
                ShowOperationMessage("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", true);
                return;
            }

            if (_newParticipant.Latitude < -90 || _newParticipant.Latitude > 90)
            {
                ShowOperationMessage("‚ùå –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90", true);
                return;
            }

            if (_newParticipant.Longitude < -180 || _newParticipant.Longitude > 180)
            {
                ShowOperationMessage("‚ùå –î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180", true);
                return;
            }

            // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è JavaScript
            var jsParticipant = new
            {
                id = DateTime.Now.Ticks,
                name = _newParticipant.Name,
                latitude = _newParticipant.Latitude.Value,
                longitude = _newParticipant.Longitude.Value,
                location = $"{_newParticipant.Name} ({_newParticipant.Latitude.Value:F4}, {_newParticipant.Longitude.Value:F4})"
            };

            // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            var participant = new Participant
            {
                Id = Guid.NewGuid(),
                Name = _newParticipant.Name,
                Address = $"{_newParticipant.Latitude.Value:F4}, {_newParticipant.Longitude.Value:F4}",
                Email = "user@example.com",
                Location = _newParticipant.Name,
                City = _newParticipant.City ?? _newParticipant.Name,
                Country = _newParticipant.Country ?? "–†–æ—Å—Å–∏—è",
                Latitude = _newParticipant.Latitude.Value,
                Longitude = _newParticipant.Longitude.Value,
                Message = _newParticipant.Message ?? $"–î–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É: {_newParticipant.Name}",
                RegisteredAt = DateTime.UtcNow,
                Timestamp = DateTime.UtcNow
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            var addResult = await ParticipantRepository.AddParticipantAsync(participant);
            bool result = addResult.Success;
            
            Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {result}");

            if (result)
            {
                ShowOperationMessage($"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ '{_newParticipant.Name}' –¥–æ–±–∞–≤–ª–µ–Ω!", false);
                ClearParticipantForm();
                await LoadParticipantsAsync(); // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                await OnParticipantAdded.InvokeAsync(participant);
            }
            else
            {
                ShowOperationMessage($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ '{_newParticipant.Name}'", true);
            }
        }
        catch (Exception ex)
        {
            ShowOperationMessage($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}", true);
        }
        finally
        {
            _isAddingParticipant = false;
            StateHasChanged();
        }
    }

    private async Task AddQuickParticipantAsync(string name, double latitude, double longitude)
    {
        if (!_isInitialized || _isAddingParticipant) return;

        _isAddingParticipant = true;
        _operationMessage = null;
        _operationError = null;
        StateHasChanged();

        try
        {
            var jsParticipant = new
            {
                id = DateTime.Now.Ticks,
                name = name,
                latitude = latitude,
                longitude = longitude,
                location = $"{name} ({latitude:F4}, {longitude:F4})"
            };

            Console.WriteLine($"üîç –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º safeAddTestParticipant (–±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ): {jsParticipant.name} ({jsParticipant.latitude}, {jsParticipant.longitude})");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            bool isFunctionAvailable = false;
            try
            {
                isFunctionAvailable = await JSRuntime.InvokeAsync<bool>("eval", $"window.globeModule && typeof window.globeModule.safeAddTestParticipant === 'function'");
                Console.WriteLine($"–§—É–Ω–∫—Ü–∏—è safeAddTestParticipant –¥–æ—Å—Ç—É–ø–Ω–∞: {isFunctionAvailable}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è JavaScript –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: {ex.Message}");
                isFunctionAvailable = false;
            }

            bool result = false;
            if (isFunctionAvailable)
            {
                // JavaScript –¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                result = await JSRuntime.InvokeAsync<bool>("eval", $"window.globeModule.safeAddTestParticipant({System.Text.Json.JsonSerializer.Serialize(jsParticipant)})");
                Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ JS: {result}");
            }
            else
            {
                // JavaScript –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é
                Console.WriteLine("üîÑ JS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π");
                var participant = new Participant
                {
                    Id = Guid.NewGuid(),
                    Name = name,
                    Address = $"{latitude:F4}, {longitude:F4}", // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                    Email = "user@example.com", // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                    Location = name, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                    City = name,
                    Country = "–†–æ—Å—Å–∏—è",
                    Latitude = latitude,
                    Longitude = longitude,
                    Message = $"–ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–ª–µ–Ω: {name}",
                    RegisteredAt = DateTime.UtcNow,
                    Timestamp = DateTime.UtcNow
                };

                var addResult = await ParticipantRepository.AddParticipantAsync(participant);
                result = addResult.Success;
                Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {result}");
            }

            if (result)
            {
                ShowOperationMessage($"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!", false);
                await LoadParticipantsAsync();
            }
            else
            {
                ShowOperationMessage($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ '{name}'", true);
            }
        }
        catch (Exception ex)
        {
            ShowOperationMessage($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}", true);
        }
        finally
        {
            _isAddingParticipant = false;
            StateHasChanged();
        }
    }

    private async Task AddRandomParticipantAsync()
    {
        var randomCities = new[]
        {
            new { Name = "–¢–æ–∫–∏–æ", Lat = 35.6762, Lng = 139.6503 },
            new { Name = "–õ–æ–Ω–¥–æ–Ω", Lat = 51.5074, Lng = -0.1278 },
            new { Name = "–ù—å—é-–ô–æ—Ä–∫", Lat = 40.7128, Lng = -74.0060 },
            new { Name = "–ü–∞—Ä–∏–∂", Lat = 48.8566, Lng = 2.3522 },
            new { Name = "–°–∏–¥–Ω–µ–π", Lat = -33.8688, Lng = 151.2093 },
            new { Name = "–†–∏–æ-–¥–µ-–ñ–∞–Ω–µ–π—Ä–æ", Lat = -22.9068, Lng = -43.1729 },
            new { Name = "–ö–µ–π–ø—Ç–∞—É–Ω", Lat = -33.9249, Lng = 18.4241 },
            new { Name = "–ú—É–º–±–∞–∏", Lat = 19.0760, Lng = 72.8777 }
        };

        var random = new Random();
        var city = randomCities[random.Next(randomCities.Length)];

        await AddQuickParticipantAsync(city.Name, city.Lat, city.Lng);
    }

    private async Task RemoveParticipantAsync()
    {
        if (!_isInitialized || _isRemovingParticipant || _participantIdToRemove == 0) return;

        _isRemovingParticipant = true;
        _operationMessage = null;
        _operationError = null;
        StateHasChanged();

        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            bool isFunctionAvailable = false;
            try
            {
                isFunctionAvailable = await JSRuntime.InvokeAsync<bool>("eval", $"typeof window.removeParticipant === 'function'");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è JavaScript –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: {ex.Message}");
                isFunctionAvailable = false;
            }

            bool result = false;
            if (isFunctionAvailable)
            {
                // JavaScript –¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                result = await JSRuntime.InvokeAsync<bool>("removeParticipant", _participantIdToRemove);
                Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ JS: {result}");
            }
            else
            {
                // JavaScript –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é
                Console.WriteLine("üîÑ JS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π");
                // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ ID –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                var allParticipants = await ParticipantRepository.GetAllParticipantsAsync();
                var participantToRemove = allParticipants.FirstOrDefault(p => p.Id.GetHashCode() == _participantIdToRemove);

                if (participantToRemove != null)
                {
                    var removeResult = await ParticipantRepository.DeleteParticipantAsync(participantToRemove.Id);
                    result = removeResult.Success;
                    Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {result}");
                }
                else
                {
                    Console.WriteLine($"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {_participantIdToRemove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏");
                    result = false;
                }
            }

            if (result)
            {
                ShowOperationMessage($"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {_participantIdToRemove} —É–¥–∞–ª–µ–Ω", false);
                _participantIdToRemove = 0;
                await LoadParticipantsAsync();
                await OnParticipantRemoved.InvokeAsync(_participantIdToRemove);
            }
            else
            {
                ShowOperationMessage($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å ID {_participantIdToRemove}", true);
            }
        }
        catch (Exception ex)
        {
            ShowOperationMessage($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}", true);
        }
        finally
        {
            _isRemovingParticipant = false;
            StateHasChanged();
        }
    }

    private void ShowOperationMessage(string message, bool isError)
    {
        _operationMessage = message;
        _operationError = isError ? message : null;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            _operationMessage = null;
            _operationError = null;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task UpdateGlobeStateAsync()
    {
        if (!_isInitialized) return;

        try
        {
            _currentState = await GlobeMediator.GetStateAsync();

            if (_currentState != null)
            {
                _participantCount = _currentState.ParticipantCount;
                _countryCount = _currentState.CountryCount;
                _isAutoRotating = _currentState.IsAutoRotating;
                _currentLod = _currentState.CurrentLevelOfDetail;

                await OnStateChanged.InvokeAsync(_currentState);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {ex.Message}";
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        _updateTimer?.Stop();
        _updateTimer?.Dispose();

        if (_isInitialized)
        {
            await GlobeMediator.DisposeAsync();
        }
    }

    void IDisposable.Dispose()
    {
        _ = DisposeAsync();
    }
}