@using ZealousMindedPeopleGeo.Models
@using ZealousMindedPeopleGeo.Services.Mapping
@using ZealousMindedPeopleGeo.Services.Repositories
@inject GlobeStateService GlobeStateService
@inject IGlobeMediator GlobeMediator
@inject IParticipantRepository ParticipantRepository
@implements IDisposable

<HeadContent>
    <link href="/_content/ZealousMindedPeopleGeo/css/participant-registration.css" rel="stylesheet" />
</HeadContent>

<div class="participant-management-panel rounded p-3 text-white">
    <div class="d-flex justify-content-between align-items-center mb-3 border-bottom pb-2" @onclick="TogglePanel" style="cursor: pointer;">
        <h5 class="mb-0">üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏</h5>
        <button class="btn btn-sm btn-outline-light">@(_isCollapsed ? "‚ñº" : "‚ñ≤")</button>
    </div>

    @if (!_isCollapsed)
    {
        <div class="row g-3 mb-3">
            <div class="col-md-4">
                <label class="form-label">–ò–º—è:</label>
                <InputText @bind-Value="_newParticipant.Name" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" class="form-control" />
            </div>
            <div class="col-md-4">
                <label class="form-label">–®–∏—Ä–æ—Ç–∞:</label>
                <InputNumber @bind-Value="_newParticipant.Latitude" placeholder="55.7558" step="0.0001" class="form-control" />
            </div>
            <div class="col-md-4">
                <label class="form-label">–î–æ–ª–≥–æ—Ç–∞:</label>
                <InputNumber @bind-Value="_newParticipant.Longitude" placeholder="37.6173" step="0.0001" class="form-control" />
            </div>
        </div>

        <div class="d-flex gap-2 mb-3">
            <button class="btn btn-success" @onclick="AddParticipantAsync" disabled="@_isAddingParticipant">
                @if (_isAddingParticipant)
                {
                    <span>‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...</span>
                }
                else
                {

                    <span>‚úÖ –î–æ–±–∞–≤–∏—Ç—å</span>
                }
            </button>
            <button class="btn btn-secondary" @onclick="ClearForm">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
            <button class="btn btn-info" @onclick="CenterOnFormCoordinates">üéØ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å</button>
        </div>

        <div class="border-top pt-3 mt-3">
            <h6 class="text-white mb-2">‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:</h6>
            <div class="d-flex flex-wrap gap-2">
                <button class="btn btn-sm btn-outline-info" @onclick="@(() => AddQuickParticipantAsync("–ú–æ—Å–∫–≤–∞", 55.7558, 37.6173))">üèõÔ∏è –ú–æ—Å–∫–≤–∞</button>
                <button class="btn btn-sm btn-outline-info" @onclick="@(() => AddQuickParticipantAsync("–°–ü–±", 59.9343, 30.3351))">üèõÔ∏è –°–ü–±</button>
                <button class="btn btn-sm btn-outline-info" @onclick="@(() => AddQuickParticipantAsync("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", 55.0084, 82.9357))">üèõÔ∏è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</button>
                <button class="btn btn-sm btn-outline-info" @onclick="@(() => AddQuickParticipantAsync("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", 56.8389, 60.6057))">üèõÔ∏è –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</button>
                <button class="btn btn-sm btn-outline-info" @onclick="@(() => AddQuickParticipantAsync("–ö–∞–∑–∞–Ω—å", 55.7961, 49.1064))">üèõÔ∏è –ö–∞–∑–∞–Ω—å</button>
                <button class="btn btn-sm btn-outline-info" @onclick="@(() => AddQuickParticipantAsync("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", 45.0355, 38.9753))">üèõÔ∏è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä</button>
                <button class="btn btn-sm btn-outline-info" @onclick="AddRandomParticipantAsync">üé≤ –°–ª—É—á–∞–π–Ω—ã–π</button>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(_operationMessage))
    {
        <div class="alert @(string.IsNullOrEmpty(_operationError) ? "alert-success" : "alert-danger") mt-3">
            @if (string.IsNullOrEmpty(_operationError))
            {
                <span>‚úÖ @_operationMessage</span>
            }
            else
            {

                <span>‚ùå @_operationMessage</span>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string GlobeId { get; set; } = "default";

    private string ContainerId => $"globe-{GlobeId}";
    private GlobeInstanceState State => GlobeStateService.GetOrCreateGlobe(GlobeId);
    private Participant _newParticipant = new();
    private bool _isCollapsed;
    private bool _isAddingParticipant;
    private string? _operationMessage;
    private string? _operationError;

    protected override void OnInitialized()
    {
        GlobeStateService.OnStateChanged += HandleStateChanged;
    }

    private void HandleStateChanged(string globeId)
    {
        if (globeId == GlobeId)
        {
            StateHasChanged();
        }
    }

    private void TogglePanel()
    {
        _isCollapsed = !_isCollapsed;
    }

    private void ClearForm()
    {
        _newParticipant = new Participant();
    }

    private async Task CenterOnFormCoordinates()
    {
        if (!State.IsInitialized || !_newParticipant.Latitude.HasValue || !_newParticipant.Longitude.HasValue) return;

        var result = await GlobeMediator.CenterOnAsync(ContainerId, _newParticipant.Latitude.Value, _newParticipant.Longitude.Value);

        if (result.Success)
        {
            ShowMessage("‚úÖ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ñ–æ—Ä–º—ã", false);
        }
        else
        {
            ShowMessage($"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {result.ErrorMessage}", true);
        }
    }

    private async Task AddParticipantAsync()
    {
        if (!State.IsInitialized || _isAddingParticipant) return;

        _isAddingParticipant = true;
        _operationMessage = null;
        _operationError = null;
        StateHasChanged();

        try
        {
            if (string.IsNullOrWhiteSpace(_newParticipant.Name))
            {
                ShowMessage("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞", true);
                return;
            }

            if (!_newParticipant.Latitude.HasValue || !_newParticipant.Longitude.HasValue)
            {
                ShowMessage("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", true);
                return;
            }

            if (_newParticipant.Latitude < -90 || _newParticipant.Latitude > 90)
            {
                ShowMessage("‚ùå –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90", true);
                return;
            }

            if (_newParticipant.Longitude < -180 || _newParticipant.Longitude > 180)
            {
                ShowMessage("‚ùå –î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180", true);
                return;
            }

            var participant = new Participant
            {
                Id = Guid.NewGuid(),
                Name = _newParticipant.Name,
                Address = $"{_newParticipant.Latitude.Value:F4}, {_newParticipant.Longitude.Value:F4}",
                Email = "user@example.com",
                Location = _newParticipant.Name,
                City = _newParticipant.City ?? _newParticipant.Name,
                Country = _newParticipant.Country ?? "–†–æ—Å—Å–∏—è",
                Latitude = _newParticipant.Latitude.Value,
                Longitude = _newParticipant.Longitude.Value,
                RegisteredAt = DateTime.UtcNow
            };

            await ParticipantRepository.AddParticipantAsync(participant);

            var participants = await ParticipantRepository.GetAllParticipantsAsync();
            var participantsList = participants.ToList();
            await GlobeMediator.AddParticipantsAsync(ContainerId, participantsList);

            GlobeStateService.UpdateState(GlobeId, s =>
            {
                s.Participants = participantsList;
                s.ParticipantCount = participantsList.Count;
            });

            ShowMessage($"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {participant.Name} –¥–æ–±–∞–≤–ª–µ–Ω", false);
            ClearForm();
        }
        catch (Exception ex)
        {
            ShowMessage($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}", true);
        }
        finally
        {
            _isAddingParticipant = false;
            StateHasChanged();
        }
    }

    private async Task AddQuickParticipantAsync(string name, double latitude, double longitude)
    {
        _newParticipant.Name = name;
        _newParticipant.Latitude = latitude;
        _newParticipant.Longitude = longitude;
        await AddParticipantAsync();
    }

    private async Task AddRandomParticipantAsync()
    {
        var random = new Random();
        var latitude = random.NextDouble() * 180 - 90;
        var longitude = random.NextDouble() * 360 - 180;
        await AddQuickParticipantAsync($"–£—á–∞—Å—Ç–Ω–∏–∫ {random.Next(1000, 9999)}", latitude, longitude);
    }

    private void ShowMessage(string message, bool isError)
    {
        _operationMessage = message;
        _operationError = isError ? message : null;
        StateHasChanged();
    }

    public void Dispose()
    {
        GlobeStateService.OnStateChanged -= HandleStateChanged;
    }
}
