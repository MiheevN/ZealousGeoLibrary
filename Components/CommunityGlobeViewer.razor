@using ZealousMindedPeopleGeo.Services.Mapping
@using ZealousMindedPeopleGeo.Services.Repositories
@inject IJSRuntime JSRuntime
@inject GlobeStateService GlobeStateService
@inject IGlobeMediator GlobeMediator
@inject IParticipantRepository ParticipantRepository
@implements IDisposable

<HeadContent>
    <link href="~/_content/ZealousMindedPeopleGeo/css/community-globe.css" rel="stylesheet" />
</HeadContent>

<div id="@ContainerId" class="globe-canvas-container" style="width: @(Width)px; height: @(Height)px;">
    @if (_isInitializing)
    {
        <div class="globe-loading-overlay text-white text-center">
            <div class="loading-spinner mb-3"></div>
            <div>–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±—É—Å–∞</div>
        </div>
    }

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="globe-error-overlay text-center p-4">
            <div class="fs-1 mb-3">‚ö†Ô∏è</div>
            <div class="text-danger mb-3">@_errorMessage</div>
            <button class="btn btn-primary" @onclick="RetryInitializationAsync">
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public string GlobeId { get; set; } = "default";
    [Parameter] public int Width { get; set; } = 800;
    [Parameter] public int Height { get; set; } = 600;

    private string ContainerId => $"globe-{GlobeId}";
    private GlobeInstanceState State => GlobeStateService.GetOrCreateGlobe(GlobeId);

    private bool _isInitializing;
    private string? _errorMessage;
    private bool _isRendering;

    protected override void OnInitialized()
    {
        GlobeStateService.OnStateChanged += HandleStateChanged;
    }

    private void HandleStateChanged(string globeId)
    {
        if (globeId == GlobeId)
        {
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isRendering)
        {
            _isRendering = true;
            try
            {
                await Task.Delay(100);
                await InitializeGlobeAsync();
            }
            finally
            {
                _isRendering = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }



    private async Task InitializeGlobeAsync()
    {
        Console.WriteLine($"[{GlobeId}] InitializeGlobeAsync: –Ω–∞—á–∞–ª–æ");
        if (State.IsInitialized)
        {
            Console.WriteLine($"[{GlobeId}] –ì–ª–æ–±—É—Å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        if (Width <= 0 || Height <= 0)
        {
            _errorMessage = $"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: Width={Width}, Height={Height}";
            Console.WriteLine($"[{GlobeId}] {_errorMessage}");
            return;
        }

        _isInitializing = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –î–û —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–æ–±—É—Å–∞
            Console.WriteLine($"[{GlobeId}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–ª–æ–±—É—Å–∞");
            var callbackResult = await GlobeMediator.SetReadyCallbackAsync(ContainerId, OnGlobeReady);
            if (!callbackResult.Success)
            {
                Console.WriteLine($"[{GlobeId}] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ callback: {callbackResult.ErrorMessage}");
            }

            Console.WriteLine($"[{GlobeId}] –í—ã–∑–æ–≤ GlobeMediator.InitializeGlobeAsync");
            var result = await GlobeMediator.InitializeGlobeAsync(ContainerId, new GlobeOptions
            {
                Width = Width,
                Height = Height
            });

            if (result.Success)
            {
                GlobeStateService.UpdateState(GlobeId, s => s.IsInitialized = true);
            }
            else
            {
                _errorMessage = result.ErrorMessage;
                Console.WriteLine($"[{GlobeId}] –û—à–∏–±–∫–∞: {_errorMessage}");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}";
            Console.WriteLine($"[{GlobeId}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {ex}");
        }
        finally
        {
            _isInitializing = false;
            if (!_isRendering)
            {
                await InvokeAsync(StateHasChanged);
            }
            Console.WriteLine($"[{GlobeId}] InitializeGlobeAsync: –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
        }
    }

    private async Task OnGlobeReady(GlobeState state)
    {
        Console.WriteLine($"üìû –ì–ª–æ–±—É—Å {GlobeId} –≥–æ—Ç–æ–≤");

        GlobeStateService.UpdateState(GlobeId, s =>
        {
            s.IsInitialized = state.IsInitialized;
            s.ParticipantCount = state.ParticipantCount;
        });

        _isInitializing = false;
        await LoadParticipantsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadParticipantsAsync()
    {
        try
        {
            Console.WriteLine($"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–ª–æ–±—É—Å–∞ {GlobeId}...");

            var participants = await ParticipantRepository.GetAllParticipantsAsync();
            var participantsList = participants.ToList();

            Console.WriteLine($"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {participantsList.Count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–ª–æ–±—É—Å–∞ {GlobeId}");

            foreach (var p in participantsList.Take(3))
            {
                Console.WriteLine($"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {p.Name}, Lat: {p.Latitude:F4}, Lng: {p.Longitude:F4}");
            }

            var result = await GlobeMediator.AddParticipantsAsync(ContainerId, participantsList);
            if (result.Success)
            {
                Console.WriteLine($"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {participantsList.Count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –≥–ª–æ–±—É—Å {GlobeId}");
                GlobeStateService.UpdateState(GlobeId, s =>
                {
                    s.Participants = participantsList;
                    s.ParticipantCount = participantsList.Count;
                });
            }
            else
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result.ErrorMessage}");
                // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ "Globe instance not found" - –≥–ª–æ–±—É—Å –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
                if (!result.ErrorMessage.Contains("Globe instance not found"))
                {
                    _errorMessage = $"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result.ErrorMessage}";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {ex.Message}");
            _errorMessage = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {ex.Message}";
        }
    }

    private async Task RetryInitializationAsync()
    {
        _errorMessage = null;
        await InitializeGlobeAsync();
    }

    public void Dispose()
    {
        GlobeStateService.OnStateChanged -= HandleStateChanged;
    }
}
