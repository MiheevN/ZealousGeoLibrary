@using Microsoft.AspNetCore.Components
@using ZealousMindedPeopleGeo.Models
@using ZealousMindedPeopleGeo.Services.Mapping
@using ZealousMindedPeopleGeo.Services.Repositories
@inject IThreeJsGlobeService ThreeJsGlobeService
@inject IParticipantRepository ParticipantRepository
@implements IDisposable

<div class="community-globe-container">
    <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è 3D –≥–ª–æ–±—É—Å–∞ -->
    <div id="@ContainerId" class="globe-canvas-container"
         style="width: @(Width)px; height: @(Height)px;">

        <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
        @if (_isInitializing)
        {
            <div class="globe-loading-overlay">
                <div class="loading-spinner"></div>
                <div class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±—É—Å–∞</div>
            </div>
        }

        <!-- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ -->
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="globe-error-overlay">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-message">@_errorMessage</div>
                <button class="retry-button" @onclick="RetryInitializationAsync">
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
            </div>
        }
    </div>

    <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±—É—Å–æ–º -->
    @if (_isInitialized && ShowControls)
    {
        <div class="globe-controls">
            <div class="control-group">
                <label class="control-label">–í—Ä–∞—â–µ–Ω–∏–µ:</label>
                <button class="control-button @(_isAutoRotating ? "active" : "")"
                        @onclick="ToggleRotationAsync"
                        title="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç">
                    üîÑ
                </button>
            </div>

            <div class="control-group">
                <label class="control-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</label>
                <span class="participant-count">@_participantCount</span>
            </div>

            <div class="control-group">
                <label class="control-label">–°—Ç—Ä–∞–Ω—ã:</label>
                <span class="country-count">@_countryCount</span>
            </div>

            <div class="control-group">
                <label class="control-label">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</label>
                <select class="control-select" @bind="_currentLod" @bind:event="oninput">
                    <option value="0">–ù–∏–∑–∫–∞—è</option>
                    <option value="1">–°—Ä–µ–¥–Ω—è—è</option>
                    <option value="2">–í—ã—Å–æ–∫–∞—è</option>
                    <option value="3">–£–ª—å—Ç—Ä–∞</option>
                </select>
            </div>

            <div class="control-group">
                <button class="control-button"
                        @onclick="RefreshDataAsync"
                        title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
                    üîÑ
                </button>
                <button class="control-button"
                        @onclick="CenterOnUserAsync"
                        title="–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ">
                    üéØ
                </button>
            </div>
        </div>
    }

    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö -->
    @if (_isInitialized && ShowParticipantInfo && _selectedParticipant != null)
    {
        <div class="participant-info-panel">
            <div class="participant-info-header">
                <h4>@_selectedParticipant.Name</h4>
                <button class="close-button" @onclick="CloseParticipantInfo">√ó</button>
            </div>
            <div class="participant-info-content">
                <div class="participant-detail">
                    <strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong>
                    <span>@_selectedParticipant.City, @_selectedParticipant.Country</span>
                </div>
                <div class="participant-detail">
                    <strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong>
                    <span>@(_selectedParticipant.Latitude?.ToString("F4") ?? "N/A"), @(_selectedParticipant.Longitude?.ToString("F4") ?? "N/A")</span>
                </div>
                @if (!string.IsNullOrEmpty(_selectedParticipant.Message))
                {
                    <div class="participant-detail">
                        <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong>
                        <span>@_selectedParticipant.Message</span>
                    </div>
                }
                <div class="participant-detail">
                    <strong>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</strong>
                    <span>@_selectedParticipant.RegisteredAt.ToString("g")</span>
                </div>
            </div>
        </div>
    }
</div>

@code {
    /// <summary>
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≥–ª–æ–±—É—Å–∞
    /// </summary>
    [Parameter] public string ContainerId { get; set; } = $"globe-{Guid.NewGuid():N}";

    /// <summary>
    /// –®–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≥–ª–æ–±—É—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    /// </summary>
    [Parameter] public int Width { get; set; } = 800;

    /// <summary>
    /// –í—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≥–ª–æ–±—É—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    /// </summary>
    [Parameter] public int Height { get; set; } = 600;

    /// <summary>
    /// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    /// </summary>
    [Parameter] public bool ShowControls { get; set; } = true;

    /// <summary>
    /// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –ø—Ä–∏ –∫–ª–∏–∫–µ
    /// </summary>
    [Parameter] public bool ShowParticipantInfo { get; set; } = true;

    /// <summary>
    /// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–ª–æ–±—É—Å–∞
    /// </summary>
    [Parameter] public GlobeOptions? Options { get; set; }

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫—É
    /// </summary>
    [Parameter] public EventCallback<Participant> OnParticipantClick { get; set; }

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±—É—Å–∞
    /// </summary>
    [Parameter] public EventCallback<GlobeInitializationResult> OnGlobeInitialized { get; set; }

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–æ–±—É—Å–∞
    /// </summary>
    [Parameter] public EventCallback<GlobeState> OnStateChanged { get; set; }

    private bool _isInitializing = false;
    private bool _isInitialized = false;
    private string? _errorMessage;
    private Participant? _selectedParticipant;
    private int _participantCount;
    private int _countryCount;
    private int _currentLod = 2;
    private bool _isAutoRotating = true;
    private GlobeState? _currentState;
    private System.Timers.Timer? _updateTimer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DOM
            await Task.Delay(100);

            await InitializeGlobeAsync();
            await LoadParticipantsAsync();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            _updateTimer = new System.Timers.Timer(30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            _updateTimer.Elapsed += async (s, e) => {
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º InvokeAsync –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ Blazor Server
                    await InvokeAsync(async () => {
                        await LoadParticipantsAsync();
                    });
                } catch (Exception ex) {
                    Console.WriteLine($"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {ex.Message}");
                }
            };
            _updateTimer.Start();
        }
    }

    private async Task InitializeGlobeAsync()
    {
        _isInitializing = true;
        _errorMessage = null;
        StateHasChanged();

        const int maxRetries = 3;
        const int retryDelay = 200; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

        for (int attempt = 1; attempt <= maxRetries; attempt++)
        {
            try
            {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if (attempt > 1)
                {
                    await Task.Delay(retryDelay * attempt);
                }

                var globeOptions = Options ?? new GlobeOptions
                {
                    Width = Width,
                    Height = Height,
                    AutoRotate = true,
                    EnableMouseControls = true,
                    LevelOfDetail = _currentLod
                };

                var result = await ThreeJsGlobeService.InitializeGlobeAsync(ContainerId, globeOptions);

                if (result.Success)
                {
                    _isInitialized = true;
                    await OnGlobeInitialized.InvokeAsync(result);
                    await UpdateGlobeStateAsync();
                    return; // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                }
                else
                {
                    _errorMessage = result.ErrorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏";
                    if (attempt == maxRetries)
                    {
                        break; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞
                    }
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{maxRetries}): {ex.Message}";
                if (attempt == maxRetries)
                {
                    break; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞
                }
            }
        }

        _isInitializing = false;
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadParticipantsAsync()
    {
        if (!_isInitialized) return;

        try
        {
            var participants = await ParticipantRepository.GetAllParticipantsAsync();

            var result = await ThreeJsGlobeService.AddParticipantsAsync(participants);

            if (result.Success)
            {
                _participantCount = participants.Count();
                await UpdateGlobeStateAsync();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task RetryInitializationAsync()
    {
        if (_isInitializing || _isInitialized) return;

        await InitializeGlobeAsync();
    }

    private async Task ToggleRotationAsync()
    {
        if (!_isInitialized) return;

        var result = await ThreeJsGlobeService.SetAutoRotationAsync(!_isAutoRotating);

        if (result.Success)
        {
            _isAutoRotating = !_isAutoRotating;
            await UpdateGlobeStateAsync();
        }
    }

    private async Task OnLodChanged(ChangeEventArgs e)
    {
        if (!_isInitialized || !int.TryParse(e.Value?.ToString(), out var lod)) return;

        _currentLod = lod;
        var result = await ThreeJsGlobeService.SetLevelOfDetailAsync(lod);

        if (result.Success)
        {
            await UpdateGlobeStateAsync();
        }
    }

    private async Task RefreshDataAsync()
    {
        await LoadParticipantsAsync();
    }

    private async Task CenterOnUserAsync()
    {
        if (!_isInitialized) return;

        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        var result = await ThreeJsGlobeService.CenterOnAsync(55.7558, 37.6176);

        if (result.Success)
        {
            await UpdateGlobeStateAsync();
        }
    }

    private void CloseParticipantInfo()
    {
        _selectedParticipant = null;
        StateHasChanged();
    }

    private async Task UpdateGlobeStateAsync()
    {
        if (!_isInitialized) return;

        try
        {
            _currentState = await ThreeJsGlobeService.GetStateAsync();

            if (_currentState != null)
            {
                _participantCount = _currentState.ParticipantCount;
                _countryCount = _currentState.CountryCount;
                _isAutoRotating = _currentState.IsAutoRotating;
                _currentLod = _currentState.CurrentLevelOfDetail;

                await OnStateChanged.InvokeAsync(_currentState);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {ex.Message}";
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        _updateTimer?.Stop();
        _updateTimer?.Dispose();

        if (_isInitialized)
        {
            await ThreeJsGlobeService.DisposeAsync();
        }
    }

    void IDisposable.Dispose()
    {
        _ = DisposeAsync();
    }
}

<style>
    .community-globe-container {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .globe-canvas-container {
        position: relative;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        background: linear-gradient(135deg, #0f0f23, #1a1a2e);
    }

    .globe-loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(2px);
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #333;
        border-top: 3px solid #00aaff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .loading-text {
        color: #fff;
        font-size: 0.9rem;
    }

    .globe-error-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: rgba(0, 0, 0, 0.8);
        text-align: center;
        padding: 2rem;
    }

    .error-icon {
        font-size: 2rem;
        margin-bottom: 1rem;
    }

    .error-message {
        color: #ff6b6b;
        margin-bottom: 1.5rem;
        max-width: 300px;
    }

    .retry-button {
        background: #00aaff;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .retry-button:hover {
            background: #0088cc;
        }

    .globe-controls {
        display: flex;
        gap: 1rem;
        align-items: center;
        padding: 0.5rem;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 8px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .control-group {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .control-label {
        color: #fff;
        font-size: 0.8rem;
        white-space: nowrap;
    }

    .control-button {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: #fff;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.8rem;
        transition: all 0.2s ease;
    }

        .control-button:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .control-button.active {
            background: #00aaff;
            border-color: #00aaff;
        }

    .control-select {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: #fff;
        padding: 0.25rem;
        border-radius: 4px;
        font-size: 0.8rem;
    }

    .participant-count,
    .country-count {
        color: #00aaff;
        font-weight: bold;
        font-size: 0.8rem;
    }

    .participant-info-panel {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.9);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        padding: 1rem;
        max-width: 300px;
        backdrop-filter: blur(10px);
    }

    .participant-info-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding-bottom: 0.5rem;
    }

        .participant-info-header h4 {
            color: #00aaff;
            margin: 0;
            font-size: 1rem;
        }

    .close-button {
        background: none;
        border: none;
        color: #fff;
        cursor: pointer;
        font-size: 1.2rem;
        padding: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .close-button:hover {
            color: #ff6b6b;
        }

    .participant-detail {
        margin-bottom: 0.5rem;
        font-size: 0.8rem;
    }

        .participant-detail strong {
            color: #aaa;
            display: inline-block;
            min-width: 80px;
        }

        .participant-detail span {
            color: #fff;
        }
</style>