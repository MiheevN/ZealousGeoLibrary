@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging
@using ZealousMindedPeopleGeo.Services
@inject IPwaService PwaService
@inject ILogger<PwaManagerComponent> Logger

<div class="pwa-manager">
    @if (_isLoading)
    {
        <div class="loading-state">
            <div class="loading-spinner"></div>
            <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
    }
    else if (_showInstallPrompt && _installInfo.CanInstall)
    {
        <div class="install-prompt">
            <div class="install-content">
                <div class="install-icon">üì±</div>
                <div class="install-text">
                    <h4>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h4>
                    <p>–ü–æ–ª—É—á–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø—Ä—è–º–æ —Å —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞</p>
                </div>
                <div class="install-actions">
                    <button class="btn btn-primary" @onclick="InstallPwaAsync">
                        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </button>
                    <button class="btn btn-secondary" @onclick="DismissInstallPrompt">
                        –ü–æ–∑–∂–µ
                    </button>
                </div>
            </div>
        </div>
    }
    else if (_showPwaInfo)
    {
        <div class="pwa-info-panel">
            <div class="pwa-header">
                <h4>PWA –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <button class="close-button" @onclick="() => _showPwaInfo = false">√ó</button>
            </div>
            <div class="pwa-content">
                <div class="pwa-status">
                    <div class="status-item">
                        <span class="status-label">–°—Ç–∞—Ç—É—Å:</span>
                        <span class="status-value @(_installInfo.IsInstalled ? "installed" : "not-installed")">
                            @(_installInfo.IsInstalled ? "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" : "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                        </span>
                    </div>

                    @if (_cacheInfo != null)
                    {
                        <div class="status-item">
                            <span class="status-label">–ö—ç—à:</span>
                            <span class="status-value">
                                @(FormatBytes(_cacheInfo.TotalSize)) (@_cacheInfo.CacheCount –∫—ç—à–µ–π)
                            </span>
                        </div>
                    }
                </div>

                <div class="pwa-actions">
                    @if (_installInfo.CanInstall)
                    {
                        <button class="btn btn-primary" @onclick="InstallPwaAsync">
                            –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        </button>
                    }

                    <button class="btn btn-secondary" @onclick="UpdateServiceWorkerAsync">
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    </button>

                    <button class="btn btn-outline-secondary" @onclick="ClearCacheAsync">
                        –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
                    </button>

                    <button class="btn btn-outline-primary" @onclick="ShowCacheInfoAsync">
                        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
                    </button>
                </div>

                @if (_showCacheDetails && _cacheInfo != null)
                {
                    <div class="cache-details">
                        <h5>–î–µ—Ç–∞–ª–∏ –∫—ç—à–∞</h5>
                        <div class="cache-list">
                            @foreach (var cache in _cacheInfo.Caches)
                            {
                                <div class="cache-item">
                                    <div class="cache-name">@cache.Name</div>
                                    <div class="cache-stats">
                                        <span>@FormatBytes(cache.Size)</span>
                                        <span>@cache.ItemCount —ç–ª–µ–º–µ–Ω—Ç–æ–≤</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    @if (_showNotificationTest)
    {
        <div class="notification-test">
            <h5>–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h5>
            <div class="form-group">
                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                <input type="text" class="form-control" @bind="_notificationTitle" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" />
            </div>
            <div class="form-group">
                <label>–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
                <input type="text" class="form-control" @bind="_notificationBody" placeholder="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" />
            </div>
            <div class="notification-actions">
                <button class="btn btn-primary" @onclick="SendTestNotificationAsync" disabled="@string.IsNullOrWhiteSpace(_notificationTitle)">
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                </button>
                <button class="btn btn-secondary" @onclick="() => _showNotificationTest = false">
                    –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public bool ShowInstallPrompt { get; set; } = true;
    [Parameter] public bool AutoCheckUpdates { get; set; } = true;
    [Parameter] public EventCallback<PwaInstallInfo> OnInstallStateChanged { get; set; }

    private bool _isLoading = true;
    private PwaInstallInfo _installInfo = new();
    private PwaCacheInfo? _cacheInfo;
    private bool _showInstallPrompt = false;
    private bool _showPwaInfo = false;
    private bool _showCacheDetails = false;
    private bool _showNotificationTest = false;
    private string _notificationTitle = "–¢–µ—Å—Ç";
    private string _notificationBody = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PWA";

    private System.Timers.Timer? _updateTimer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadPwaInfoAsync();

            if (AutoCheckUpdates)
            {
                _updateTimer = new System.Timers.Timer(300000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                _updateTimer.Elapsed += async (s, e) => await CheckForUpdatesAsync();
                _updateTimer.Start();
            }
        }
    }

    private async Task LoadPwaInfoAsync()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            _installInfo = await PwaService.GetInstallInfoAsync();
            _cacheInfo = await PwaService.GetCacheInfoAsync();

            _showInstallPrompt = ShowInstallPrompt && _installInfo.CanInstall;

            if (OnInstallStateChanged.HasDelegate)
            {
                await OnInstallStateChanged.InvokeAsync(_installInfo);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading PWA info");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task InstallPwaAsync()
    {
        try
        {
            var result = await PwaService.ShowInstallPromptAsync();

            if (result)
            {
                _showInstallPrompt = false;
                await LoadPwaInfoAsync(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error installing PWA");
        }
    }

    private void DismissInstallPrompt()
    {
        _showInstallPrompt = false;
        StateHasChanged();
    }

    private async Task UpdateServiceWorkerAsync()
    {
        try
        {
            await PwaService.UpdateServiceWorkerAsync();
            await LoadPwaInfoAsync(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating service worker");
        }
    }

    private async Task ClearCacheAsync()
    {
        try
        {
            await PwaService.ClearCacheAsync();
            await LoadPwaInfoAsync(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing cache");
        }
    }

    private async Task ShowCacheInfoAsync()
    {
        _showCacheDetails = !_showCacheDetails;
        if (_showCacheDetails && _cacheInfo == null)
        {
            _cacheInfo = await PwaService.GetCacheInfoAsync();
        }
        StateHasChanged();
    }

    private async Task CheckForUpdatesAsync()
    {
        try
        {
            await PwaService.UpdateServiceWorkerAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking for updates");
        }
    }

    private async Task SendTestNotificationAsync()
    {
        try
        {
            var result = await PwaService.SendNotificationAsync(_notificationTitle, _notificationBody);
            if (result)
            {
                _showNotificationTest = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending test notification");
        }
    }

    public async Task ShowPwaInfoAsync()
    {
        _showPwaInfo = true;
        await LoadPwaInfoAsync();
    }

    public async Task ShowNotificationTestAsync()
    {
        _showNotificationTest = true;
        StateHasChanged();
    }

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:F1} {sizes[order]}";
    }

    public void Dispose()
    {
        _updateTimer?.Stop();
        _updateTimer?.Dispose();
    }
}

<style>
.pwa-manager {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.loading-state {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    color: #666;
}

.loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #007bff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.install-prompt {
    background: linear-gradient(135deg, #007bff, #0056b3);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    color: white;
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
}

.install-content {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.install-icon {
    font-size: 2rem;
}

.install-text h4 {
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
}

.install-text p {
    margin: 0;
    opacity: 0.9;
    font-size: 0.9rem;
}

.install-actions {
    display: flex;
    gap: 0.5rem;
    margin-left: auto;
}

.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s ease;
}

.btn-primary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
}

.btn-primary:hover {
    background: rgba(255, 255, 255, 0.3);
}

.btn-secondary {
    background: transparent;
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
}

.btn-secondary:hover {
    background: rgba(255, 255, 255, 0.1);
}

.pwa-info-panel {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 1rem;
}

.pwa-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #dee2e6;
}

.pwa-header h4 {
    margin: 0;
    color: #495057;
}

.close-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #6c757d;
    padding: 0;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.close-button:hover {
    color: #495057;
}

.pwa-status {
    margin-bottom: 1rem;
}

.status-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e9ecef;
}

.status-item:last-child {
    border-bottom: none;
}

.status-label {
    font-weight: 500;
    color: #495057;
}

.status-value {
    color: #007bff;
    font-weight: 600;
}

.status-value.installed {
    color: #28a745;
}

.status-value.not-installed {
    color: #dc3545;
}

.pwa-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
}

.btn-outline-primary {
    background: white;
    color: #007bff;
    border: 1px solid #007bff;
}

.btn-outline-primary:hover {
    background: #007bff;
    color: white;
}

.btn-outline-secondary {
    background: white;
    color: #6c757d;
    border: 1px solid #6c757d;
}

.btn-outline-secondary:hover {
    background: #6c757d;
    color: white;
}

.cache-details {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #dee2e6;
}

.cache-details h5 {
    margin: 0 0 0.5rem 0;
    color: #495057;
    font-size: 1rem;
}

.cache-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.cache-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 4px;
}

.cache-name {
    font-weight: 500;
    color: #495057;
}

.cache-stats {
    display: flex;
    gap: 1rem;
    font-size: 0.8rem;
    color: #6c757d;
}

.notification-test {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
}

.notification-test h5 {
    margin: 0 0 1rem 0;
    color: #495057;
}

.form-group {
    margin-bottom: 1rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.25rem;
    font-weight: 500;
    color: #495057;
}

.form-control {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 0.9rem;
}

.form-control:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.notification-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
}

@@media (max-width: 768px) {
    .install-content {
        flex-direction: column;
        text-align: center;
    }

    .install-actions {
        margin-left: 0;
        justify-content: center;
    }

    .pwa-actions {
        flex-direction: column;
    }

    .cache-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
    }

    .cache-stats {
        align-self: flex-end;
    }
}
</style>